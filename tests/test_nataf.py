#!/usr/bin/env python3
# coding: utf-8

import pytest
import numpy as np
import pandas as pd

from resourcecode.cengaussfit import cengaussfit
from resourcecode.huseby import huseby

from . import DATA_DIR


def test_cengaussfit_acceptance():
    """this acceptance test assert that the output of the python function is
    the same as the R function, for the same input"""

    quant = 0.9
    X = np.loadtxt(
        DATA_DIR / "cengaussfit" / "input_0.csv",
        usecols=(1, 2, 3),
        delimiter=",",
        skiprows=1,
    )

    data = cengaussfit(X, quant)
    expected = np.loadtxt(
        DATA_DIR / "cengaussfit" / "output_0.csv",
        usecols=(1,),
        delimiter=",",
        skiprows=1,
    )
    assert data.success is True
    assert data.x == pytest.approx(expected, rel=1e-3)


def test_nataf_acceptance():
    """this acceptance test assert that the output of the python function is
    the same as the R function, for the same input"""

    pytest.skip("How to test this, knowing it generates random values ?")


def test_huseby_acceptance():
    """this acceptance test assert that the output of the python function is
    the same as the R function, for the same input.

        The input is generated by the `nataf_sim` R function.
        The output is generated by the `huseby` R function.
    """

    ntheta = 120
    npt = 120

    simulation = np.loadtxt(
        DATA_DIR / "huseby" / "input_0.csv",
        delimiter=",",
        usecols=(1, 2, 3),
        skiprows=1,
    )

    expected = np.loadtxt(
        DATA_DIR / "huseby" / "output_0.csv",
        delimiter=",",
        usecols=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        skiprows=1,
    )

    X_expected = expected[:, :3]
    Y_expected = expected[:, 3:6]
    Z_expected = expected[:, 6:9]
    theta_expected = expected[:ntheta, 9]

    X, Y, Z, theta = huseby(
        simulation, np.array([0.9, 0.95, 0.975]), ntheta=ntheta, npt=npt
    )

    assert X == pytest.approx(X_expected)
    assert Y == pytest.approx(Y_expected)
    assert Z == pytest.approx(Z_expected)
    assert theta == pytest.approx(theta_expected)
