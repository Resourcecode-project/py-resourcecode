
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_0_Database_exploration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_0_Database_exploration.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_0_Database_exploration.py:


Visualize the database configuration: nodes, bathymetry...
==========================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-13

.. code-block:: Python

    import resourcecode
    import numpy as np
    import matplotlib.pyplot as plot
    import matplotlib.tri as mtri
    from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable

    plot.rcParams["figure.dpi"] = 400







.. GENERATED FROM PYTHON SOURCE LINES 14-18

Select a node and plot the mesh around
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Below is an extract of the nodes locations and characteristics.

.. GENERATED FROM PYTHON SOURCE LINES 18-19

.. code-block:: Python

    resourcecode.data.get_grid_field()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>node</th>
          <th>longitude</th>
          <th>latitude</th>
          <th>depth</th>
          <th>d50</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>6.922498</td>
          <td>62.914669</td>
          <td>3.0</td>
          <td>0.000</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2</td>
          <td>6.910178</td>
          <td>62.913013</td>
          <td>3.0</td>
          <td>1.322</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3</td>
          <td>6.920552</td>
          <td>62.904381</td>
          <td>3.0</td>
          <td>1.322</td>
        </tr>
        <tr>
          <th>3</th>
          <td>4</td>
          <td>6.933673</td>
          <td>62.899376</td>
          <td>3.0</td>
          <td>1.322</td>
        </tr>
        <tr>
          <th>4</th>
          <td>5</td>
          <td>6.945979</td>
          <td>62.900120</td>
          <td>3.0</td>
          <td>1.322</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>328025</th>
          <td>328026</td>
          <td>-4.641320</td>
          <td>53.165386</td>
          <td>41.0</td>
          <td>-1.585</td>
        </tr>
        <tr>
          <th>328026</th>
          <td>328027</td>
          <td>-2.131147</td>
          <td>56.025635</td>
          <td>67.0</td>
          <td>0.737</td>
        </tr>
        <tr>
          <th>328027</th>
          <td>328028</td>
          <td>-5.977029</td>
          <td>55.205364</td>
          <td>139.0</td>
          <td>0.737</td>
        </tr>
        <tr>
          <th>328028</th>
          <td>328029</td>
          <td>-5.939720</td>
          <td>55.209774</td>
          <td>142.5</td>
          <td>-1.585</td>
        </tr>
        <tr>
          <th>328029</th>
          <td>328030</td>
          <td>-4.639367</td>
          <td>54.751503</td>
          <td>20.0</td>
          <td>-1.585</td>
        </tr>
      </tbody>
    </table>
    <p>328030 rows × 5 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 20-22

One can also obtain the location of the points where the full 2D spectral data is available using
`resourcecode.get_grid_spec()` function

.. GENERATED FROM PYTHON SOURCE LINES 22-23

.. code-block:: Python

    resourcecode.get_grid_spec()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>longitude</th>
          <th>latitude</th>
          <th>name</th>
          <th>depth</th>
          <th>d50</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1.5000</td>
          <td>52.0000</td>
          <td>E001500N52000</td>
          <td>15.413269</td>
          <td>0.737000</td>
        </tr>
        <tr>
          <th>1</th>
          <td>-5.5000</td>
          <td>52.0000</td>
          <td>W005500N52000</td>
          <td>89.648946</td>
          <td>-0.826506</td>
        </tr>
        <tr>
          <th>2</th>
          <td>-6.0000</td>
          <td>52.0000</td>
          <td>W006000N52000</td>
          <td>95.836144</td>
          <td>-1.585000</td>
        </tr>
        <tr>
          <th>3</th>
          <td>-6.5000</td>
          <td>52.0000</td>
          <td>W006500N52000</td>
          <td>52.674089</td>
          <td>0.737000</td>
        </tr>
        <tr>
          <th>4</th>
          <td>-7.0000</td>
          <td>52.0000</td>
          <td>W007000N52000</td>
          <td>54.674644</td>
          <td>0.034650</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>24271</th>
          <td>2.4392</td>
          <td>51.3894</td>
          <td>WESTHINDER</td>
          <td>23.067135</td>
          <td>0.364202</td>
        </tr>
        <tr>
          <th>24272</th>
          <td>3.4155</td>
          <td>51.4334</td>
          <td>WIELINGENNOORD</td>
          <td>8.367460</td>
          <td>0.734515</td>
        </tr>
        <tr>
          <th>24273</th>
          <td>6.0640</td>
          <td>53.4100</td>
          <td>WIERUMERWAD2</td>
          <td>3.000000</td>
          <td>1.322000</td>
        </tr>
        <tr>
          <th>24274</th>
          <td>6.0638</td>
          <td>53.4090</td>
          <td>WIERUMERWAD3</td>
          <td>3.000000</td>
          <td>1.322000</td>
        </tr>
        <tr>
          <th>24275</th>
          <td>4.0084</td>
          <td>51.9922</td>
          <td>ZDV8-2D-MMND</td>
          <td>12.754536</td>
          <td>1.099299</td>
        </tr>
      </tbody>
    </table>
    <p>24276 rows × 5 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-28

Usually, we know the coordinates of the point we want to look at.
It is possible to find the closest node from this location, using the
following function. It return a vector of dimension two, with the node number and the distance from
the requested location (in meters).

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: Python


    # We select the closest node from given coordinates
    selected_node = resourcecode.data.get_closest_point(
        latitude=48.3026514, longitude=-4.6861533
    )
    selected_node





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (134940, 296.89)



.. GENERATED FROM PYTHON SOURCE LINES 36-37

Once the node is selected, it is possible to print a map of the area.

.. GENERATED FROM PYTHON SOURCE LINES 37-72

.. code-block:: Python


    lat_min, lat_max = 47.75, 48.75
    lon_min, lon_max = -5.25, -4.25

    nodes = resourcecode.data.get_grid_field().query(
        f"latitude <= {lat_max} and latitude >= {lat_min} and longitude > {lon_min} and longitude < {lon_max}"
    )
    spec = resourcecode.get_grid_spec().query(
        f"latitude <= {lat_max} and latitude >= {lat_min} and longitude > {lon_min} and longitude < {lon_max}"
    )
    coast = resourcecode.data.get_coastline().query(
        f"latitude <= {lat_max} and latitude >= {lat_min} and longitude > {lon_min} and longitude < {lon_max}"
    )
    islands = resourcecode.data.get_islands().query(
        f"latitude <= {lat_max} and latitude >= {lat_min} and longitude > {lon_min} and longitude < {lon_max}"
    )
    plot.figure(figsize=(10, 10))
    plot.scatter(nodes.longitude, nodes.latitude, s=1, label="Nodes")
    plot.scatter(spec.longitude, spec.latitude, s=2, color="orange", label="Spectral grid")
    plot.ylim(lat_min, lat_max)
    plot.xlim(lon_min, lon_max)
    plot.plot(coast.longitude, coast.latitude, color="black")
    classes = list(islands.ID.unique())
    for c in classes:
        df2 = islands.loc[islands["ID"] == c]
        plot.plot(df2.longitude, df2.latitude, color="black")
    plot.scatter(
        nodes[nodes.node == selected_node[0]].longitude,
        nodes[nodes.node == selected_node[0]].latitude,
        s=3,
        color="red",
        label="Selected point",
    )
    plot.legend()
    plot.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_0_Database_exploration_001.png
   :alt: plot 0 Database exploration
   :srcset: /auto_examples/images/sphx_glr_plot_0_Database_exploration_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-80

####################################################################

Plot of bathymetry next to the selected point
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The data included in the toolbox alows to easily map the depth anywhere on the covered area. The following piece
of code shows and example of such a map.

.. GENERATED FROM PYTHON SOURCE LINES 81-128

.. code-block:: Python


    # Importing the data for plotting
    tri = (
        resourcecode.get_triangles().to_numpy() - 1
    )  # The '-1' is due to the Zero-based numbering of python
    field_mesh = resourcecode.data.get_grid_field().to_numpy()
    triang = mtri.Triangulation(field_mesh[:, 1], field_mesh[:, 2], tri)

    plotted_nodes = (
        (field_mesh[:, 1] <= lon_max)
        & (field_mesh[:, 1] >= lon_min)
        & (field_mesh[:, 2] <= lat_max)
        & (field_mesh[:, 2] >= lat_min)
    )

    s = field_mesh[:, 3]
    s[np.isnan(s)] = 0  # Due to missing values in bathy

    fig = plot.figure(figsize=(10, 10))

    ax0 = fig.add_subplot(111, aspect="equal")

    plot.ylim(lat_min, lat_max)
    plot.xlim(lon_min, lon_max)
    SC = ax0.tripcolor(triang, s, shading="gouraud")
    SC.set_clim(min(s[plotted_nodes]), max(s[plotted_nodes]))
    # Plot selected location
    plot.scatter(
        nodes[nodes.node == selected_node[0]].longitude,
        nodes[nodes.node == selected_node[0]].latitude,
        s=3,
        color="red",
        label="Selected point",
    )
    # Add coastlines and islands
    plot.plot(coast.longitude, coast.latitude, color="black")
    classes = list(islands.ID.unique())
    for c in classes:
        df2 = islands.loc[islands["ID"] == c]
        plot.plot(df2.longitude, df2.latitude, color="black")

    # Colorbar.
    the_divider = make_axes_locatable(ax0)
    color_axis = the_divider.append_axes("right", size="5%", pad=0.1)
    cbar = plot.colorbar(SC, cax=color_axis)
    cbar.set_label("Depth (m)", fontsize=18)
    plot.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_0_Database_exploration_002.png
   :alt: plot 0 Database exploration
   :srcset: /auto_examples/images/sphx_glr_plot_0_Database_exploration_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.712 seconds)


.. _sphx_glr_download_auto_examples_plot_0_Database_exploration.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_0_Database_exploration.ipynb <plot_0_Database_exploration.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_0_Database_exploration.py <plot_0_Database_exploration.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_0_Database_exploration.zip <plot_0_Database_exploration.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
