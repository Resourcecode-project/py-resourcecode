
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_1_data_extraction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_1_data_extraction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_1_data_extraction.py:


Extract some time-series from the database and analysis
==========================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-12

.. code-block:: Python

    import resourcecode
    import resourcecode.spectrum
    import matplotlib.pyplot as plot

    plot.rcParams["figure.dpi"] = 400








.. GENERATED FROM PYTHON SOURCE LINES 13-18

Node selection and data extraction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Below, we will look for data next to the location of interest, located in the vicinity of Brest Bay.
We will look at the time-series data and also some spectral data


.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python

    selected_node = resourcecode.data.get_closest_point(
        latitude=48.3026514, longitude=-4.6861533
    )
    selected_node




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (134940, 296.89)



.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: Python

    selected_specPoint = resourcecode.data.get_closest_station(
        latitude=48.3026514, longitude=-4.6861533
    )
    selected_specPoint





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ('W004679N48304', 808.82)



.. GENERATED FROM PYTHON SOURCE LINES 29-47

Extraction of data from the Hindcast database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sea-state parameters extraction and helpers from the toolbox
------------------------------------------------------------

Once the node is selected, it is possible to retrieve the data from the Cassandra database using the
commands below. It is also possible to select which variables to retrieve.
The list of available variables can be obtained using the `get_variables` method.
We study here the following variables:

 - :math:`H_s`, the significant wave height;
 - :math:`T_p` the peak period;
 - :math:`D_p` the direction at peak frequency;
 - The energy flux :math:`CgE`;
 - zonal and meridional velocity components of wind;

For this example, we have selectedonly year 2010.

.. GENERATED FROM PYTHON SOURCE LINES 47-57

.. code-block:: Python


    client = resourcecode.Client()
    data = client.get_dataframe(
        pointId=selected_node[0],
        startDateTime="2010-01-01T01:00:00",
        endDateTime="2011-01-01T00:00:00",
        parameters=("hs", "uwnd", "vwnd", "t02", "tp", "dp", "cge"),
    )
    data.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>hs</th>
          <th>uwnd</th>
          <th>vwnd</th>
          <th>t02</th>
          <th>tp</th>
          <th>dp</th>
          <th>cge</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2010-01-01 01:00:00</th>
          <td>1.360</td>
          <td>-6.0</td>
          <td>-6.7</td>
          <td>4.78</td>
          <td>11.363636</td>
          <td>221.0</td>
          <td>9.3</td>
        </tr>
        <tr>
          <th>2010-01-01 02:00:00</th>
          <td>1.350</td>
          <td>-6.0</td>
          <td>-7.0</td>
          <td>4.68</td>
          <td>11.363636</td>
          <td>221.0</td>
          <td>8.9</td>
        </tr>
        <tr>
          <th>2010-01-01 03:00:00</th>
          <td>1.324</td>
          <td>-5.6</td>
          <td>-7.3</td>
          <td>4.62</td>
          <td>11.494253</td>
          <td>222.0</td>
          <td>8.5</td>
        </tr>
        <tr>
          <th>2010-01-01 04:00:00</th>
          <td>1.282</td>
          <td>-5.4</td>
          <td>-7.8</td>
          <td>4.56</td>
          <td>11.494253</td>
          <td>223.0</td>
          <td>7.9</td>
        </tr>
        <tr>
          <th>2010-01-01 05:00:00</th>
          <td>1.220</td>
          <td>-5.3</td>
          <td>-8.1</td>
          <td>4.60</td>
          <td>11.494253</td>
          <td>224.0</td>
          <td>7.2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-60

With the toolbox, is is possible to convert zonal and meridional velocity components of wind the the more
convenient Intensity-direction variables.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    data["wspd"], data["wdir"] = resourcecode.utils.zmcomp2metconv(data.uwnd, data.vwnd)








.. GENERATED FROM PYTHON SOURCE LINES 64-68

The figure below is an example of the histograme of the variables that can be
extracted from the database. :math:`H_s`,:math:`T_p`, :math:`W_s` and :math:`CgE` are
shown here with the wind and wave directions, but the code can be changed to plot any
of the available variables in the Hindcast database.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: Python


    data[["hs", "tp", "cge", "wspd", "dp", "wdir"]].hist(bins=15, figsize=[16, 8])
    plot.tight_layout()




.. image-sg:: /auto_examples/images/sphx_glr_plot_1_data_extraction_001.png
   :alt: hs, tp, cge, wspd, dp, wdir
   :srcset: /auto_examples/images/sphx_glr_plot_1_data_extraction_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-79

Spectral data extraction and computation of sea-state parameters
----------------------------------------------------------------

The toolbox also offers the possibility to download the spectral data from the coarser 'SPEC' grid,
corresponding to the orange dots of the web portal. This is possible thanks to the `get_2D_spectrum` and
`get_1D_spectrum` from the *spectrum* module. An example is shown below:

.. GENERATED FROM PYTHON SOURCE LINES 79-84

.. code-block:: Python


    spec = resourcecode.spectrum.get_2D_spectrum(
        selected_specPoint[0], years=["2010"], months=["01"]
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

And we offer function to represent the spectral data, both for 2D and 1D spectrum.

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python


    resourcecode.spectrum.plot_2D_spectrum(spec, 1)
    plot.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_1_data_extraction_002.png
   :alt: Wave directional spectrum at point W004679N48304 (-4.68°W,48.30°N) on 2010-01-01 01:00:00
   :srcset: /auto_examples/images/sphx_glr_plot_1_data_extraction_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-92

There is also function to compute the 1D spectrum from the 2D.

.. GENERATED FROM PYTHON SOURCE LINES 92-96

.. code-block:: Python


    spec1D = resourcecode.spectrum.convert_spectrum_2Dto1D(spec)
    resourcecode.spectrum.plot_1D_spectrum(spec1D, 1, sea_state=False)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 700x500 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 97-99

Among the functionalities of the toolbox, it is possible to compute the sea-state parameters from spectral data. Small
discrepancies can be found between the Hindcast sea-state parameters and the one computed with the toolbox.

.. GENERATED FROM PYTHON SOURCE LINES 99-104

.. code-block:: Python


    parameters_df = resourcecode.spectrum.compute_parameters_from_2D_spectrum(
        spec, use_depth=True
    )
    parameters_df.head()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>Hm0</th>
          <th>Tp</th>
          <th>T01</th>
          <th>T02</th>
          <th>Te</th>
          <th>mu</th>
          <th>nu</th>
          <th>CgE</th>
          <th>km</th>
          <th>lm</th>
          <th>depth</th>
          <th>Thetam</th>
          <th>Thetapm</th>
          <th>Spr</th>
          <th>Qp</th>
          <th>wnd</th>
          <th>wnddir</th>
          <th>cur</th>
          <th>curdir</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>2010-01-01 00:00:00</td>
          <td>1.258713</td>
          <td>11.382546</td>
          <td>6.299747</td>
          <td>4.894921</td>
          <td>9.126643</td>
          <td>0.629497</td>
          <td>0.810161</td>
          <td>8.091658</td>
          <td>0.173012</td>
          <td>36.316369</td>
          <td>28.5</td>
          <td>221.665815</td>
          <td>221.841529</td>
          <td>52.452013</td>
          <td>1.905638</td>
          <td>9.0</td>
          <td>44.400002</td>
          <td>0.3</td>
          <td>218.900009</td>
        </tr>
        <tr>
          <th>0</th>
          <td>2010-01-01 01:00:00</td>
          <td>1.271215</td>
          <td>11.273698</td>
          <td>6.118387</td>
          <td>4.806066</td>
          <td>8.845303</td>
          <td>0.618847</td>
          <td>0.787826</td>
          <td>8.000145</td>
          <td>0.178597</td>
          <td>35.180836</td>
          <td>30.0</td>
          <td>222.276735</td>
          <td>222.227011</td>
          <td>55.652089</td>
          <td>1.780164</td>
          <td>9.0</td>
          <td>42.000000</td>
          <td>0.4</td>
          <td>227.199997</td>
        </tr>
        <tr>
          <th>0</th>
          <td>2010-01-01 02:00:00</td>
          <td>1.270940</td>
          <td>11.310064</td>
          <td>5.964570</td>
          <td>4.717962</td>
          <td>8.617916</td>
          <td>0.611819</td>
          <td>0.773477</td>
          <td>7.790361</td>
          <td>0.184614</td>
          <td>34.034173</td>
          <td>31.5</td>
          <td>223.474217</td>
          <td>222.590049</td>
          <td>57.603553</td>
          <td>1.701667</td>
          <td>9.2</td>
          <td>40.200001</td>
          <td>0.3</td>
          <td>234.600006</td>
        </tr>
        <tr>
          <th>0</th>
          <td>2010-01-01 03:00:00</td>
          <td>1.250777</td>
          <td>11.416240</td>
          <td>5.887424</td>
          <td>4.667331</td>
          <td>8.503349</td>
          <td>0.609530</td>
          <td>0.768868</td>
          <td>7.451620</td>
          <td>0.188269</td>
          <td>33.373499</td>
          <td>32.5</td>
          <td>226.098226</td>
          <td>223.223522</td>
          <td>58.092844</td>
          <td>1.701595</td>
          <td>9.2</td>
          <td>37.799999</td>
          <td>0.2</td>
          <td>246.000000</td>
        </tr>
        <tr>
          <th>0</th>
          <td>2010-01-01 04:00:00</td>
          <td>1.213452</td>
          <td>11.484228</td>
          <td>5.851882</td>
          <td>4.627031</td>
          <td>8.463007</td>
          <td>0.612215</td>
          <td>0.774279</td>
          <td>6.990126</td>
          <td>0.191482</td>
          <td>32.813387</td>
          <td>32.5</td>
          <td>229.779274</td>
          <td>224.242327</td>
          <td>57.098317</td>
          <td>1.753959</td>
          <td>9.5</td>
          <td>34.799999</td>
          <td>0.1</td>
          <td>285.899994</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.083 seconds)


.. _sphx_glr_download_auto_examples_plot_1_data_extraction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_data_extraction.ipynb <plot_1_data_extraction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_data_extraction.py <plot_1_data_extraction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_1_data_extraction.zip <plot_1_data_extraction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
